return {get = function(bolt)
  -- all of these represent pixel data from the 24th row of 48x48 images
  -- first value is 1-4 for tracks 1-4, or 5 for arrow, 6 for highlighted arrow, 7 for pressed arrow
  -- second value is direction:
  -- for arrow, direction is 1 for NE, 2 for NW, 3 for SE, 4 for SW
  -- for track, direction is 1 = NE+NW, 2 = NE+SE, 3 for SE+SW, 4 for NW+SW, 5 for NE+SW, 6 for NW+SE
  local images = {
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xb3\xb3\xb3\xff\xaa\xaa\xaa\xff\xa3\xa3\xa3\xff\x6b\x6b\x6b\xff\x8d\x8d\x8d\xff\x82\x82\x82\xff\x5c\x5c\x5c\xff\x8d\x8d\x8d\xff\x5c\x5c\x5c\xff\x54\x54\x54\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x54\x54\x54\xff\x63\x63\x63\xff\xa3\xa3\xa3\xff\x5c\x5c\x5c\xff\x8d\x8d\x8d\xff\x8d\x8d\x8d\xff\x6b\x6b\x6b\xff\xa3\xa3\xa3\xff\xaa\xaa\xaa\xff\xb3\xb3\xb3\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 1, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x33\x33\x33\xff\xdb\xdb\xdb\xff\xbb\xbb\xbb\xff\x6b\x6b\x6b\xff\x8d\x8d\x8d\xff\x82\x82\x82\xff\x6b\x6b\x6b\xff\xd3\xd3\xd3\xff\x73\x73\x73\xff\x54\x54\x54\xff\x44\x44\x44\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x82\x82\x82\xff\x44\x44\x44\xff\x7b\x7b\x7b\xff\xdb\xdb\xdb\xff\x6b\x6b\x6b\xff\x8d\x8d\x8d\xff\xa3\xa3\xa3\xff\xe2\xe2\xe2\xff\xbb\xbb\xbb\xff\xc4\xc4\xc4\xff\x73\x73\x73\xff\x33\x33\x33\xff\x00\x00\x01\xff\x00\x00\x01\x00"] =
      function () return 1, 2 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xb3\xb3\xb3\xff\xaa\xaa\xaa\xff\x9b\x9b\x9b\xff\xb3\xb3\xb3\xff\xc4\xc4\xc4\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\xcb\xcb\xcb\xff\x73\x73\x73\xff\x4b\x4b\x4b\xff\x63\x63\x63\xff\x5c\x5c\x5c\xff\x63\x63\x63\xff\x73\x73\x73\xff\x82\x82\x82\xff\x7b\x7b\x7b\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\x7b\x7b\x7b\xff\x82\x82\x82\xff\x73\x73\x73\xff\x63\x63\x63\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x4b\x4b\x4b\xff\x82\x82\x82\xff\xdb\xdb\xdb\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\xc4\xc4\xc4\xff\xb3\xb3\xb3\xff\x9b\x9b\x9b\xff\xaa\xaa\xaa\xff\xb3\xb3\xb3\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 1, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\xff\x33\x33\x33\xff\x73\x73\x73\xff\xc4\xc4\xc4\xff\xbb\xbb\xbb\xff\xe2\xe2\xe2\xff\xa3\xa3\xa3\xff\x8d\x8d\x8d\xff\x6b\x6b\x6b\xff\xdb\xdb\xdb\xff\x7b\x7b\x7b\xff\x44\x44\x44\xff\x82\x82\x82\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x44\x44\x44\xff\x54\x54\x54\xff\x73\x73\x73\xff\xd3\xd3\xd3\xff\x6b\x6b\x6b\xff\x82\x82\x82\xff\x8d\x8d\x8d\xff\x6b\x6b\x6b\xff\xbb\xbb\xbb\xff\xdb\xdb\xdb\xff\x33\x33\x33\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 1, 4 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xb3\xb3\xb3\xff\xaa\xaa\xaa\xff\x73\x73\x73\xff\x8d\x8d\x8d\xff\x8d\x8d\x8d\xff\x82\x82\x82\xff\xe2\xe2\xe2\xff\xd3\xd3\xd3\xff\x73\x73\x73\xff\x44\x44\x44\xff\x54\x54\x54\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x54\x54\x54\xff\x54\x54\x54\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x63\x63\x63\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x4b\x4b\x4b\xff\x54\x54\x54\xff\x8d\x8d\x8d\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xb3\xb3\xb3\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\xc4\xc4\xc4\xff\xaa\xaa\xaa\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 1, 5 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x3b\x3b\x3b\xff\xaa\xaa\xaa\xff\xc4\xc4\xc4\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\xb3\xb3\xb3\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x8d\x8d\x8d\xff\x54\x54\x54\xff\x4b\x4b\x4b\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x63\x63\x63\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x7b\x7b\x7b\xff\x7b\x7b\x7b\xff\x54\x54\x54\xff\x54\x54\x54\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x54\x54\x54\xff\x44\x44\x44\xff\x73\x73\x73\xff\xd3\xd3\xd3\xff\xe2\xe2\xe2\xff\x82\x82\x82\xff\x8d\x8d\x8d\xff\x8d\x8d\x8d\xff\x73\x73\x73\xff\xaa\xaa\xaa\xff\xb3\xb3\xb3\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 1, 6 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xb3\xb3\xb3\xff\x24\x24\x24\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\xb3\xb3\xb3\xff\xb3\xb3\xb3\xff\x8b\x8b\x8b\xff\x82\x82\x82\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x6c\x6c\x6c\xff\x93\x93\x93\xff\xb3\xb3\xb3\xff\x33\x33\x33\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x24\x24\x24\xff\xb3\xb3\xb3\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 2, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x33\x33\x33\xff\xd3\xd3\xd3\xff\x33\x33\x33\xff\xb3\xb3\xb3\xff\xf2\xf2\xf2\xff\xdb\xdb\xdb\xff\x42\x42\x42\xff\x15\x15\x15\xff\x52\x52\x52\xff\x6c\x6c\x6c\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x63\x63\x63\xff\x42\x42\x42\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x2b\x2b\x2b\xff\x63\x63\x63\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x6c\x6c\x6c\xff\x52\x52\x52\xff\x15\x15\x15\xff\x2b\x2b\x2b\xff\x63\x63\x63\xff\xc3\xc3\xc3\xff\xf2\xf2\xf2\xff\xc3\xc3\xc3\xff\xc3\xc3\xc3\xff\x70\x70\x70\xff\x33\x33\x33\xff\x00\x00\x01\xff\x00\x00\x01\x00"] =
      function () return 2, 2 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x52\x52\x52\xff\x4b\x4b\x4b\xff\xb3\xb3\xb3\xff\xd3\xd3\xd3\xff\xd3\xd3\xd3\xff\xb3\xb3\xb3\xff\x4b\x4b\x4b\xff\xa3\xa3\xa3\xff\x8b\x8b\x8b\xff\x4b\x4b\x4b\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x82\x82\x82\xff\x93\x93\x93\xff\xc3\xc3\xc3\xff\xec\xec\xec\xff\xdb\xdb\xdb\xff\xd3\xd3\xd3\xff\xd3\xd3\xd3\xff\xbb\xbb\xbb\xff\x4b\x4b\x4b\xff\x33\x33\x33\xff\xb3\xb3\xb3\xff\x42\x42\x42\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 2, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\xff\x33\x33\x33\xff\x70\x70\x70\xff\xc3\xc3\xc3\xff\x63\x63\x63\xff\xc3\xc3\xc3\xff\xf2\xf2\xf2\xff\xc3\xc3\xc3\xff\x42\x42\x42\xff\x1c\x1c\x1c\xff\x52\x52\x52\xff\x6c\x6c\x6c\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x63\x63\x63\xff\x2b\x2b\x2b\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x42\x42\x42\xff\x63\x63\x63\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x70\x70\x70\xff\x6c\x6c\x6c\xff\x52\x52\x52\xff\x15\x15\x15\xff\x42\x42\x42\xff\xdb\xdb\xdb\xff\xf2\xf2\xf2\xff\xbb\xbb\xbb\xff\xbb\xbb\xbb\xff\xdb\xdb\xdb\xff\x33\x33\x33\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 2, 4 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x52\x52\x52\xff\x4b\x4b\x4b\xff\xb3\xb3\xb3\xff\xd3\xd3\xd3\xff\xd3\xd3\xd3\xff\xb3\xb3\xb3\xff\x4b\x4b\x4b\xff\xc3\xc3\xc3\xff\x93\x93\x93\xff\x4b\x4b\x4b\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x6c\x6c\x6c\xff\x8b\x8b\x8b\xff\xa3\xa3\xa3\xff\x33\x33\x33\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x24\x24\x24\xff\xab\xab\xab\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 2, 5 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x24\x24\x24\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\xb3\xb3\xb3\xff\xb3\xb3\xb3\xff\x8b\x8b\x8b\xff\x82\x82\x82\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x52\x52\x52\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x42\x42\x42\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x7d\x7d\x7d\xff\x82\x82\x82\xff\x8b\x8b\x8b\xff\xb3\xb3\xb3\xff\xec\xec\xec\xff\xdb\xdb\xdb\xff\xd3\xd3\xd3\xff\xd3\xd3\xd3\xff\xbb\xbb\xbb\xff\x4b\x4b\x4b\xff\x33\x33\x33\xff\xb3\xb3\xb3\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 2, 6 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xb3\xb3\xb3\xff\x53\x53\x53\xff\x5b\x5b\x5b\xff\x4b\x4b\x4b\xff\x53\x53\x53\xff\x5b\x5b\x5b\xff\x93\x93\x93\xff\xa3\xa3\xa3\xff\x7a\x7a\x7a\xff\x73\x73\x73\xff\x73\x73\x73\xff\x63\x63\x63\xff\x3b\x3b\x3b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\x63\x63\x63\xff\x5b\x5b\x5b\xff\x43\x43\x43\xff\x43\x43\x43\xff\x5b\x5b\x5b\xff\x63\x63\x63\xff\x53\x53\x53\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x63\x63\x63\xff\x43\x43\x43\xff\x82\x82\x82\xff\xab\xab\xab\xff\x43\x43\x43\xff\x4b\x4b\x4b\xff\x53\x53\x53\xff\x4b\x4b\x4b\xff\x5b\x5b\x5b\xff\x53\x53\x53\xff\xb3\xb3\xb3\xff\x34\x34\x34\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 3, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x34\x34\x34\xff\x34\x34\x34\xff\xd2\xd2\xd2\xff\x63\x63\x63\xff\x9c\x9c\x9c\xff\xd2\xd2\xd2\xff\xbb\xbb\xbb\xff\x53\x53\x53\xff\x53\x53\x53\xff\x53\x53\x53\xff\x43\x43\x43\xff\x23\x23\x23\xff\x6b\x6b\x6b\xff\x82\x82\x82\xff\x7a\x7a\x7a\xff\x3b\x3b\x3b\xff\x23\x23\x23\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\x5b\x5b\x5b\xff\x63\x63\x63\xff\x43\x43\x43\xff\x2b\x2b\x2b\xff\x34\x34\x34\xff\x73\x73\x73\xff\x82\x82\x82\xff\x73\x73\x73\xff\x3b\x3b\x3b\xff\x23\x23\x23\xff\x43\x43\x43\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x34\x34\x34\xff\x34\x34\x34\xff\x63\x63\x63\xff\x63\x63\x63\xff\xab\xab\xab\xff\xcb\xcb\xcb\xff\xea\xea\xea\xff\xbb\xbb\xbb\xff\xc3\xc3\xc3\xff\x73\x73\x73\xff\x34\x34\x34\xff\x00\x00\x01\xff\x00\x00\x01\x00"] =
      function () return 3, 2 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x73\x73\x73\xff\x63\x63\x63\xff\xb3\xb3\xb3\xff\xcb\xcb\xcb\xff\xb3\xb3\xb3\xff\x9c\x9c\x9c\xff\x73\x73\x73\xff\x93\x93\x93\xff\x73\x73\x73\xff\x34\x34\x34\xff\x63\x63\x63\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x73\x73\x73\xff\x5b\x5b\x5b\xff\x2b\x2b\x2b\xff\x2b\x2b\x2b\xff\x5b\x5b\x5b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x53\x53\x53\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x3b\x3b\x3b\xff\x63\x63\x63\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7a\x7a\x7a\xff\xab\xab\xab\xff\xe2\xe2\xe2\xff\xb3\xb3\xb3\xff\xb3\xb3\xb3\xff\xcb\xcb\xcb\xff\xb3\xb3\xb3\xff\x63\x63\x63\xff\x5b\x5b\x5b\xff\xb3\xb3\xb3\xff\x43\x43\x43\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 3, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\xff\x34\x34\x34\xff\x73\x73\x73\xff\xc3\xc3\xc3\xff\x82\x82\x82\xff\xcb\xcb\xcb\xff\xcb\xcb\xcb\xff\xcb\xcb\xcb\xff\xa3\xa3\xa3\xff\x6b\x6b\x6b\xff\x34\x34\x34\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x43\x43\x43\xff\x23\x23\x23\xff\x34\x34\x34\xff\x5b\x5b\x5b\xff\x7a\x7a\x7a\xff\x82\x82\x82\xff\x63\x63\x63\xff\x2b\x2b\x2b\xff\x43\x43\x43\xff\x63\x63\x63\xff\x5b\x5b\x5b\xff\x4b\x4b\x4b\xff\x3b\x3b\x3b\xff\x23\x23\x23\xff\x3b\x3b\x3b\xff\x7a\x7a\x7a\xff\x82\x82\x82\xff\x6b\x6b\x6b\xff\x23\x23\x23\xff\x43\x43\x43\xff\x4b\x4b\x4b\xff\x53\x53\x53\xff\x53\x53\x53\xff\xbb\xbb\xbb\xff\xd2\xd2\xd2\xff\x9c\x9c\x9c\xff\xbb\xbb\xbb\xff\xdb\xdb\xdb\xff\x34\x34\x34\xff\x34\x34\x34\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 3, 4 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x73\x73\x73\xff\x53\x53\x53\xff\xab\xab\xab\xff\xbb\xbb\xbb\xff\xbb\xbb\xbb\xff\xc3\xc3\xc3\xff\x7a\x7a\x7a\xff\xab\xab\xab\xff\x7a\x7a\x7a\xff\x34\x34\x34\xff\x63\x63\x63\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x63\x63\x63\xff\x43\x43\x43\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\x5b\x5b\x5b\xff\x73\x73\x73\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x63\x63\x63\xff\x3b\x3b\x3b\xff\x7a\x7a\x7a\xff\x9c\x9c\x9c\xff\x63\x63\x63\xff\x63\x63\x63\xff\x63\x63\x63\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x5b\x5b\x5b\xff\xab\xab\xab\xff\x3b\x3b\x3b\xff\x34\x34\x34\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 3, 5 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x34\x34\x34\xff\x3b\x3b\x3b\xff\xab\xab\xab\xff\x5b\x5b\x5b\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x63\x63\x63\xff\x73\x73\x73\xff\xbb\xbb\xbb\xff\xa3\xa3\xa3\xff\x7a\x7a\x7a\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x63\x63\x63\xff\x34\x34\x34\xff\x73\x73\x73\xff\x73\x73\x73\xff\x43\x43\x43\xff\x73\x73\x73\xff\x7a\x7a\x7a\xff\x73\x73\x73\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x73\x73\x73\xff\x53\x53\x53\xff\x73\x73\x73\xff\x73\x73\x73\xff\x34\x34\x34\xff\x63\x63\x63\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\xa3\xa3\xa3\xff\xe2\xe2\xe2\xff\xdb\xdb\xdb\xff\xbb\xbb\xbb\xff\xbb\xbb\xbb\xff\xab\xab\xab\xff\x53\x53\x53\xff\x5b\x5b\x5b\xff\xb3\xb3\xb3\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 3, 6 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\xaa\xaa\xaa\xff\x5b\x5b\x5b\xff\x72\x72\x72\xff\xdb\xdb\xdb\xff\xdb\xdb\xdb\xff\x8b\x8b\x8b\xff\xc3\xc3\xc3\xff\xbc\xbc\xbc\xff\xa3\xa3\xa3\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x52\x52\x52\xff\x94\x94\x94\xff\x94\x94\x94\xff\x5b\x5b\x5b\xff\x83\x83\x83\xff\x94\x94\x94\xff\x83\x83\x83\xff\x4b\x4b\x4b\xff\x4b\x4b\x4b\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x5b\x5b\x5b\xff\xa3\xa3\xa3\xff\xbc\xbc\xbc\xff\x63\x63\x63\xff\x72\x72\x72\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x63\x63\x63\xff\x5b\x5b\x5b\xff\xb3\xb3\xb3\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 4, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x33\x33\x33\xff\xd5\xd5\xd5\xff\x6b\x6b\x6b\xff\xc3\xc3\xc3\xff\xf3\xf3\xf3\xff\xdb\xdb\xdb\xff\x72\x72\x72\xff\x44\x44\x44\xff\x52\x52\x52\xff\xa3\xa3\xa3\xff\x94\x94\x94\xff\x4b\x4b\x4b\xff\x5b\x5b\x5b\xff\x52\x52\x52\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\x8b\x8b\x8b\xff\xa3\xa3\xa3\xff\x8b\x8b\x8b\xff\x6b\x6b\x6b\xff\x4b\x4b\x4b\xff\x3b\x3b\x3b\xff\x52\x52\x52\xff\x63\x63\x63\xff\x7a\x7a\x7a\xff\x6b\x6b\x6b\xff\x44\x44\x44\xff\x4b\x4b\x4b\xff\x8b\x8b\x8b\xff\xa3\xa3\xa3\xff\x8b\x8b\x8b\xff\x5b\x5b\x5b\xff\x44\x44\x44\xff\x44\x44\x44\xff\x83\x83\x83\xff\x7a\x7a\x7a\xff\x63\x63\x63\xff\xc3\xc3\xc3\xff\xea\xea\xea\xff\xca\xca\xca\xff\xc3\xc3\xc3\xff\x72\x72\x72\xff\x33\x33\x33\xff\x00\x00\x01\xff\x00\x00\x01\x00"] =
      function () return 4, 2 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x9b\x9b\x9b\xff\x72\x72\x72\xff\x72\x72\x72\xff\xc3\xc3\xc3\xff\xd5\xd5\xd5\xff\xd5\xd5\xd5\xff\xbc\xbc\xbc\xff\x72\x72\x72\xff\xb3\xb3\xb3\xff\x9b\x9b\x9b\xff\x52\x52\x52\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x8b\x8b\x8b\xff\x72\x72\x72\xff\x63\x63\x63\xff\x44\x44\x44\xff\x33\x33\x33\xff\x3b\x3b\x3b\xff\x44\x44\x44\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x5b\x5b\x5b\xff\x94\x94\x94\xff\x94\x94\x94\xff\x52\x52\x52\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\xa3\xa3\xa3\xff\xca\xca\xca\xff\xd5\xd5\xd5\xff\x8b\x8b\x8b\xff\xca\xca\xca\xff\xea\xea\xea\xff\xc3\xc3\xc3\xff\x63\x63\x63\xff\x63\x63\x63\xff\xb3\xb3\xb3\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 4, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\xff\x33\x33\x33\xff\x72\x72\x72\xff\xc3\xc3\xc3\xff\xdb\xdb\xdb\xff\xdb\xdb\xdb\xff\x72\x72\x72\xff\x5b\x5b\x5b\xff\x83\x83\x83\xff\x83\x83\x83\xff\x4b\x4b\x4b\xff\x52\x52\x52\xff\x8b\x8b\x8b\xff\xa3\xa3\xa3\xff\x8b\x8b\x8b\xff\x5b\x5b\x5b\xff\x44\x44\x44\xff\x44\x44\x44\xff\x6b\x6b\x6b\xff\x7a\x7a\x7a\xff\x63\x63\x63\xff\x52\x52\x52\xff\x3b\x3b\x3b\xff\x4b\x4b\x4b\xff\x8b\x8b\x8b\xff\xa3\xa3\xa3\xff\x8b\x8b\x8b\xff\x5b\x5b\x5b\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x52\x52\x52\xff\x52\x52\x52\xff\x4b\x4b\x4b\xff\x94\x94\x94\xff\xa3\xa3\xa3\xff\x52\x52\x52\xff\x44\x44\x44\xff\x72\x72\x72\xff\xdb\xdb\xdb\xff\xf3\xf3\xf3\xff\xc3\xc3\xc3\xff\xbc\xbc\xbc\xff\xdb\xdb\xdb\xff\x33\x33\x33\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 4, 4 end,
    ["\x00\x00\x01\x00\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x9b\x9b\x9b\xff\x72\x72\x72\xff\x72\x72\x72\xff\xc3\xc3\xc3\xff\xd5\xd5\xd5\xff\xd5\xd5\xd5\xff\xbc\xbc\xbc\xff\x72\x72\x72\xff\xca\xca\xca\xff\xa3\xa3\xa3\xff\x52\x52\x52\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x52\x52\x52\xff\x94\x94\x94\xff\x94\x94\x94\xff\x63\x63\x63\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x5b\x5b\x5b\xff\x9b\x9b\x9b\xff\xb3\xb3\xb3\xff\x63\x63\x63\xff\x72\x72\x72\xff\x7a\x7a\x7a\xff\x7a\x7a\x7a\xff\x63\x63\x63\xff\x5b\x5b\x5b\xff\xaa\xaa\xaa\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 4, 5 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x3b\x3b\x3b\xff\xaa\xaa\xaa\xff\x5b\x5b\x5b\xff\x72\x72\x72\xff\xdb\xdb\xdb\xff\xdb\xdb\xdb\xff\x8b\x8b\x8b\xff\xc3\xc3\xc3\xff\xbc\xbc\xbc\xff\xa3\xa3\xa3\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x52\x52\x52\xff\x94\x94\x94\xff\x94\x94\x94\xff\x5b\x5b\x5b\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x94\x94\x94\xff\x83\x83\x83\xff\x63\x63\x63\xff\x94\x94\x94\xff\x94\x94\x94\xff\x52\x52\x52\xff\x83\x83\x83\xff\x94\x94\x94\xff\x94\x94\x94\xff\xa3\xa3\xa3\xff\xc3\xc3\xc3\xff\xd5\xd5\xd5\xff\x8b\x8b\x8b\xff\xca\xca\xca\xff\xea\xea\xea\xff\xc3\xc3\xc3\xff\x63\x63\x63\xff\x63\x63\x63\xff\xb3\xb3\xb3\xff\x3b\x3b\x3b\xff\x3b\x3b\x3b\xff\x00\x00\x01\x00"] =
      function () return 4, 6 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\xdb\xdb\xdb\xff\xd3\xd3\xd3\xff\xbb\xbb\xbb\xff\xbb\xbb\xbb\xff\xd3\xd3\xd3\xff\xc4\xc4\xc4\xff\x63\x63\x63\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x7b\x7b\x7b\xff\x8d\x8d\x8d\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x1c\x1c\x1c\xff\x82\x82\x82\xff\x82\x82\x82\xff\x82\x82\x82\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 5, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\x82\x82\x82\xff\x82\x82\x82\xff\x82\x82\x82\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x1c\x1c\x1c\xff\x8d\x8d\x8d\xff\x7b\x7b\x7b\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\x63\x63\x63\xff\xc4\xc4\xc4\xff\xd3\xd3\xd3\xff\xbb\xbb\xbb\xff\xbb\xbb\xbb\xff\xd3\xd3\xd3\xff\xdb\xdb\xdb\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 5, 2 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\x82\x82\x82\xff\x7b\x7b\x7b\xff\x6b\x6b\x6b\xff\x63\x63\x63\xff\x63\x63\x63\xff\xbb\xbb\xbb\xff\xdb\xdb\xdb\xff\xcb\xcb\xcb\xff\xb3\xb3\xb3\xff\xb3\xb3\xb3\xff\xaa\xaa\xaa\xff\x1c\x1c\x1c\xff\xaa\xaa\xaa\xff\xaa\xaa\xaa\xff\xc4\xc4\xc4\xff\xcb\xcb\xcb\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 5, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\xcb\xcb\xcb\xff\xc4\xc4\xc4\xff\xaa\xaa\xaa\xff\xaa\xaa\xaa\xff\x1c\x1c\x1c\xff\xaa\xaa\xaa\xff\xb3\xb3\xb3\xff\xb3\xb3\xb3\xff\xcb\xcb\xcb\xff\xdb\xdb\xdb\xff\xbb\xbb\xbb\xff\x63\x63\x63\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x7b\x7b\x7b\xff\x82\x82\x82\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 5, 4 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x9b\x9b\x9b\xff\xfc\xfc\xfc\xff\xf3\xf3\xf3\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xa3\xa3\xa3\xff\xaa\xaa\xaa\xff\xaa\xaa\xaa\xff\xbb\xbb\xbb\xff\x82\x82\x82\xff\x33\x33\x33\xff\x00\x00\x01\x00\x33\x33\x33\xff\x7b\x7b\x7b\xff\xcb\xcb\xcb\xff\xc4\xc4\xc4\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 6, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\xc4\xc4\xc4\xff\xcb\xcb\xcb\xff\x7b\x7b\x7b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x33\x33\x33\xff\x82\x82\x82\xff\xbb\xbb\xbb\xff\xaa\xaa\xaa\xff\xaa\xaa\xaa\xff\xa3\xa3\xa3\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xf3\xf3\xf3\xff\xfc\xfc\xfc\xff\x9b\x9b\x9b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 6, 2 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\x7b\x7b\x7b\xff\xbb\xbb\xbb\xff\xaa\xaa\xaa\xff\xa3\xa3\xa3\xff\xa3\xa3\xa3\xff\xf3\xf3\xf3\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xf3\xf3\xf3\xff\xf3\xf3\xf3\xff\x93\x93\x93\xff\x33\x33\x33\xff\x93\x93\x93\xff\xeb\xeb\xeb\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 6, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x33\x33\x33\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xeb\xeb\xeb\xff\x93\x93\x93\xff\x33\x33\x33\xff\x93\x93\x93\xff\xf3\xf3\xf3\xff\xf3\xf3\xf3\xff\xfc\xfc\xfc\xff\xfc\xfc\xfc\xff\xf3\xf3\xf3\xff\xa3\xa3\xa3\xff\xa3\xa3\xa3\xff\xaa\xaa\xaa\xff\xbb\xbb\xbb\xff\x7b\x7b\x7b\xff\x33\x33\x33\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 6, 4 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x14\x14\x14\xff\xaa\xaa\xaa\xff\xaa\xaa\xaa\xff\x9b\x9b\x9b\xff\xaa\xaa\xaa\xff\xbb\xbb\xbb\xff\xaa\xaa\xaa\xff\x54\x54\x54\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x6b\x6b\x6b\xff\x73\x73\x73\xff\x14\x14\x14\xff\x00\x00\x01\x00\x14\x14\x14\xff\x44\x44\x44\xff\x33\x33\x33\xff\x2b\x2b\x2b\xff\x00\x00\x01\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 7, 1 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\x73\x73\x73\xff\x73\x73\x73\xff\x73\x73\x73\xff\x1c\x1c\x1c\xff\x00\x00\x01\x00\x1c\x1c\x1c\xff\x73\x73\x73\xff\x63\x63\x63\xff\x54\x54\x54\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x63\x63\x63\xff\x5c\x5c\x5c\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x33\x33\x33\xff\x33\x33\x33\xff\x00\x00\x01\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 7, 2 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x1c\x1c\x1c\xff\x73\x73\x73\xff\x63\x63\x63\xff\x54\x54\x54\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x63\x63\x63\xff\x6b\x6b\x6b\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x0b\x0b\x0b\xff\x54\x54\x54\xff\x44\x44\x44\xff\x44\x44\x44\xff\x3b\x3b\x3b\xff\x00\x00\x01\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 7, 3 end,
    ["\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x0b\x0b\x0b\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x5c\x5c\x5c\xff\x63\x63\x63\xff\x14\x14\x14\xff\x82\x82\x82\xff\x93\x93\x93\xff\x9b\x9b\x9b\xff\xb3\xb3\xb3\xff\xc4\xc4\xc4\xff\xa3\xa3\xa3\xff\x54\x54\x54\xff\x54\x54\x54\xff\x54\x54\x54\xff\x54\x54\x54\xff\x54\x54\x54\xff\x0b\x0b\x0b\xff\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00"] =
      function () return 7, 4 end,
  }

  local arrowdirectionnames = {
    [1] = "ne",
    [2] = "nw",
    [3] = "se",
    [4] = "sw",
  }

  -- 18th row of 36x36 images
  local targetcirclered = "\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x21\x12\x12\x12\xe9\x4b\x4b\x4b\xff\x5b\x5b\x5b\xff\x5b\x5b\x5b\xff\x3b\x3b\x3b\xff\x00\x00\x01\xe3\x00\x00\x01\x0e\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x22\x22\x22\x3e\x5b\x5b\x5b\xf5\x73\x73\x73\xff\x7a\x7a\x7a\xff\x84\x84\x84\xff\x33\x33\x33\xff\x22\x22\x22\xff\x00\x00\x01\xbc\x33\x33\x33\x00\xb3\xb3\xb3\x00"
  local targetcirclegreen = "\x9b\x9b\x9b\x00\x4b\x4b\x4b\x00\x00\x00\x01\xbc\x33\x33\x33\xe3\xb3\xb3\xb3\xff\x9b\x9b\x9b\xff\x4b\x4b\x4b\xff\x0c\x0c\x0c\xe1\x0c\x0c\x0c\x38\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x0c\x0c\x0c\x00\x12\x12\x12\x00\x00\x00\x01\x00\xd2\xd2\xd2\x00\xeb\xeb\xeb\x00\x73\x73\x73\x00\x12\x12\x12\x0a\x00\x00\x01\x8f\xd2\xd2\xd2\xfb\xeb\xeb\xeb\xff\x73\x73\x73\xff\x53\x53\x53\xff\x00\x00\x01\xa9\x00\x00\x01\x00\x00\x00\x01\x00"

  local digits, _, digitheight = bolt.createsurfacefrompng("images.digits")
  local digithalfwidth = 8
  local digitwidth = digithalfwidth * 2
  local runedecorvertexid = 175
  local objecthalfsize = 24
  local objectsize = objecthalfsize * 2
  local targetcirclehalfsize = 18
  local targetcirclesize = targetcirclehalfsize * 2
  local resolveinterval = 200000 -- 0.2 seconds
  local clickresolvedelay = 1000000 -- 1 second

  -- converts a colour from the range 0.0-1.0 to the integer range 0-255
  local function convertcolour (col)
    return math.floor((col * 255.0) + 0.5)
  end

  -- checks if two rune structures match
  local function runeeq (a, b)
    return a.x == b.x and a.y == b.y and a.z == b.z and a.r == b.r and a.g == b.g and a.b == b.b
  end

  -- draws an integer on the screen centered on (x,y), assuming it will be 1 or 2 digits
  local function drawnumber (n, x, y)
    local doubledigit = n > 9
    local startx = x - (doubledigit and digitwidth or digithalfwidth)
    local starty = y - (digitheight / 2)
    if doubledigit then
      digits:drawtoscreen(digitwidth * math.floor(n / 10), 0, digitwidth, digitheight, startx, starty, digitwidth, digitheight)
      digits:drawtoscreen(digitwidth * (n % 10), 0, digitwidth, digitheight, startx + digitwidth, starty, digitwidth, digitheight)
    else
      digits:drawtoscreen(digitwidth * n, 0, digitwidth, digitheight, startx, starty, digitwidth, digitheight)
    end
  end

  local function trackhasne (id)
    return id == 1 or id == 2 or id == 5
  end

  local function trackhasnw (id)
    return id == 1 or id == 4 or id == 6
  end

  local function trackhasse (id)
    return id == 2 or id == 3 or id == 6
  end

  local function trackhassw (id)
    return id == 3 or id == 4 or id == 5
  end

  return {
    create = function (event, firstvertex, x, y, x2, y2)
      local verticesperimage = event:verticesperimage()

      -- sets the solutionposition and solutiondirection of each track to one which solves the puzzle,
      -- or sets isvalid to false if the puzzle can't be solved. ignores any pre-existing solutiondirection.
      -- this function assumes that all the tracks are populated with pieces, and that all the
      -- relationships between arrows, tracks, and pieces are correctly set in the data structure.
      local function solve (this)
        -- there should always be multiple match spots
        if not this.firstmatch then
          this.isvalid = false
          return
        end

        local trackcount = 0
        for _, track in pairs(this.tracks) do
          trackcount = trackcount + 1
          track.solutionposition = 0 -- how many moves are necessary for this track
          track.solutiondirection = 2 -- which direction of arrow needs to be pressed that number of times

          -- validate that all the tracks form a complete loop and every piece has a rune on it
          local startpiece = track.pieces[1]
          local piece = startpiece
          for i = 1, track.piececount do
            if not piece or not piece.rune or (i ~= 1 and piece.height == startpiece.height) then
              this.isvalid = false
              return
            end
            piece = piece.next[1]
          end
          if not piece or piece.height ~= startpiece.height then
            this.isvalid = false
            return
          end
        end

        -- there needs to be at least one track, and exactly twice as many arrows as tracks
        if trackcount == 0 or trackcount * 2 ~= this.arrowcount then
          this.isvalid = false
          return
        end

        -- find a solution that satisfies the two tracks named in firstmatch
        local track1 = this.tracks[this.firstmatch[1]]
        local track2 = this.tracks[this.firstmatch[2]]
        local done = false
        while not done do
          -- check if the current solutionpositions solve the first two tracks
          local firstsolved = true
          for _, piece in ipairs(track1.pieces) do
            if not piece.match then goto continue end
            if piece.match.trackid ~= this.firstmatch[2] then goto continue end
            local p1 = piece
            local p2 = piece.match
            for _ = 1, track1.solutionposition do p1 = p1.next[1] end
            for _ = 1, track2.solutionposition do p2 = p2.next[1] end
            if not runeeq(p1.rune, p2.rune) then firstsolved = false end
            ::continue::
          end

          if firstsolved then
            -- first two tracks are solved, try to bruteforce the rest
            while true do
              -- check if the current solutionpositions solve the whole puzzle
              local solved = true
              for _, track in pairs(this.tracks) do
                for _, piece in ipairs(track.pieces) do
                  if piece.match then
                    local p1 = piece
                    local p2 = piece.match
                    for _ = 1, track.solutionposition do p1 = p1.next[1] end
                    for _ = 1, p2.track.solutionposition do p2 = p2.next[1] end
                    if not runeeq(p1.rune, p2.rune) then solved = false end
                  end
                end
              end
              if solved then
                done = true
                break
              end

              -- increment positions of the tracks we're brute-forcing, starting with the lowest-numbered one
              -- and if we've wrapped it all the way around, reset it to 0 and keep counting up to find another one to increment.
              -- stop if i goes above highesttrack because that means there's no solution, probably because we got a
              -- false-positive on the first two tracks, so we need to break out and continue the outer loop.
              local i = 1
              while true do
                local track = this.tracks[i]
                if track and i ~= this.firstmatch[1] and i ~= this.firstmatch[2] then
                  track.solutionposition = track.solutionposition + 1
                  if track.solutionposition ~= track.piececount then break end
                  track.solutionposition = 0
                end
                i = i + 1
                if i > this.highesttrack then break end
              end
              if i > this.highesttrack then break end
            end
          end

          if not done then
            -- either the first two tracks aren't solved or the brute-forcing was unsuccessful,
            -- so increment the first two tracks and go again
            track1.solutionposition = track1.solutionposition + 1
            if track1.solutionposition >= track1.piececount then
              track1.solutionposition = 0
              track2.solutionposition = track2.solutionposition + 1
              if track2.solutionposition >= track2.piececount then
                this.isvalid = false
                break
              end
            end
          end
        end

        -- puzzle is solved - now check if it's faster for each track to go in the other direction
        for i, track in pairs(this.tracks) do
          if track.solutionposition * 2 > track.piececount then
            track.solutionposition = track.piececount - track.solutionposition
            track.solutiondirection = 1
          end
        end

        this.solvedarrows = this.arrows
      end

      local function handlerender2d (this, event, firstvertex)
        for i = firstvertex, event:vertexcount(), verticesperimage do
          local sx2, sy2 = event:vertexxy(i)
          local sx, sy = event:vertexxy(i + 2)
          if sx < x or sy < y or sx2 > x2 or sy2 > y2 then goto continue end
          
          local ax, ay, aw, ah, _, _ = event:vertexatlasdetails(i)
          if aw == objectsize and ah == objectsize then
            -- most of the images we're interested in are 48x48, all in the "images" table
            local f = images[event:texturedata(ax, ay + objecthalfsize, aw * 4)]
            if f == nil then goto continue end
            local id, dir = f()
            local red, _, _, _ = event:vertexcolour(i)
            red = convertcolour(red)

            if id >= 5 then
              -- this is an arrow
              this.arrowcount = this.arrowcount + 1
              local tw, th = event:targetsize()
              this.arrows[this.arrowcount] = {x = sx, y = sy, direction = dir, red = red, pressed = id == 7}
            else
              -- this is a track piece
              this.pieceheight = this.pieceheight + 1
              local track = this.tracks[id]
              local piece = {x = sx, y = sy, x2 = sx2, y2 = sy2, direction = dir, height = this.pieceheight, next = {}, track = track, trackid = id}

              if not track then
                -- this is the first time we've seen this track, so add it to the list of tracks that exist in this puzzle
                track = {red = red, pieces = {[1] = piece}, piececount = 1, arrowcount = 0}
                this.tracks[id] = track
                if id > this.highesttrack then
                  this.highesttrack = id
                end
                this.piececount = this.piececount + 1
                this.pieces[this.piececount] = piece
                goto continue
              end

              -- some crossover track pieces get rendered multiple times, so don't add this one if we've seen it before
              for i, piece in ipairs(track.pieces) do
                if piece.x == sx and piece.y == sy then
                  piece.height = this.pieceheight
                  goto continue
                end
              end
              track.piececount = track.piececount + 1
              track.pieces[track.piececount] = piece
              this.piececount = this.piececount + 1
              this.pieces[this.piececount] = piece

              -- set associations between the pieces in this track
              for _, p in ipairs(track.pieces) do
                if trackhasne(dir) and p.x == piece.x + objecthalfsize and p.y == piece.y - objecthalfsize then
                  piece.ne = p
                  p.sw = piece
                end

                if trackhasnw(dir) and p.x == piece.x - objecthalfsize and p.y == piece.y - objecthalfsize then
                  piece.nw = p
                  p.se = piece
                end

                if trackhasse(dir) and p.x == piece.x + objecthalfsize and p.y == piece.y + objecthalfsize then
                  piece.se = p
                  p.nw = piece
                end

                if trackhassw(dir) and p.x == piece.x - objecthalfsize and p.y == piece.y + objecthalfsize then
                  piece.sw = p
                  p.ne = piece
                end
              end
            end
          elseif aw == targetcirclesize and ah == targetcirclesize and (event:texturecompare(ax, ay + targetcirclehalfsize, targetcirclered) or event:texturecompare(ax, ay + targetcirclehalfsize, targetcirclegreen)) then
            -- target circle, drawn on top of multiple track pieces which need to match each other
            local piece1 = nil
            local piece2 = nil
            for _, p in ipairs(this.pieces) do
              if not (sx < p.x or sy < p.y or sx2 > p.x2 or sy2 > p.y2) then
                if not piece1 then
                  piece1 = p
                else
                  piece2 = p
                  break
                end
              end
            end
            if piece1 and piece2 then
              piece1.match = piece2
              piece2.match = piece1
              if not this.firstmatch then
                this.firstmatch = {[1] = piece1.trackid, [2] = piece2.trackid}
              end
            end
          end

          ::continue::
        end
      end

      local function valid (this)
        return this.isvalid
      end

      local function onswapbuffers (this, event)
        if not this.isvalid then return end
        if not this.objectsfound then
          this.isvalid = false
          return
        end
        this.objectsfound = false

        if not this.hasrunedata then
          -- figure out what all the arrows do
          for _, arrow in ipairs(this.arrows) do
            -- find out which track this arrow relates to, by colour association
            -- fortunately the red-channel alone is distinct enough to go by without needing the green or blue
            local track = nil
            for _, t in pairs(this.tracks) do
              if t.red == arrow.red then
                track = t
                break
              end
            end
            if not track then
              this.isvalid = false
              return
            end

            -- find the piece of the track that this arrow is adjacent to
            local piece = nil
            local offsetx = -objecthalfsize
            local offsety = (arrow.direction == 1 or arrow.direction == 4) and -objecthalfsize or objecthalfsize
            for _, p in ipairs(track.pieces) do
              if (p.x == arrow.x + offsetx and p.y == arrow.y + offsety) or (p.x == arrow.x - offsetx and p.y == arrow.y - offsety) then
                piece = p
                break
              end
            end
            if not piece then
              this.isvalid = false
              return
            end
            arrow.track = track
            arrow.piece = piece
            local trackdir = track.arrowcount + 1
            track.arrowcount = trackdir
            arrow.trackdir = track.arrowcount

            if trackdir == 1 then
              -- follow the track all the way around, setting the "next" for all of them in both directions
              local currentpiece = piece
              local endheight = currentpiece.height
              local notdirection = 5 - arrow.direction
              local movedirection = arrow.direction
              local nextpiece = currentpiece[arrowdirectionnames[movedirection]]
              if not nextpiece then
                for i = 1, 4 do
                  local p = currentpiece[arrowdirectionnames[i]]
                  if p and i ~= notdirection then
                    nextpiece = p
                    movedirection = i
                    break
                  end
                end
              end
              currentpiece.next[1] = nextpiece
              nextpiece.next[2] = currentpiece

              while nextpiece.height ~= endheight do
                currentpiece = nextpiece
                for i = 1, 4 do
                  local p = currentpiece[arrowdirectionnames[i]]
                  if p and i ~= (5 - movedirection) then
                    nextpiece = p
                    movedirection = i
                    break
                  end
                end
                currentpiece.next[1] = nextpiece
                nextpiece.next[2] = currentpiece
              end
            end
          end

          if this.validrunecount == this.piececount then
            this:solve()
            if not this.isvalid then return end
            this.hasrunedata = true
          else
            this:reset()
          end
        end

        -- if enough time has elapsed since solving the puzzle, indicate that it needs to be re-solved
        if this.nextsolvetime ~= nil and bolt.time() > this.nextsolvetime then
          this:reset()
        end
      end

      local function onrender2d (this, event)
        -- if no solution, use this data to find a solution, then return
        if not this.hasrunedata then
          handlerender2d(this, event, 1)
        end

        if this.solvedarrows then
          -- look at every image
          local gw, gh = bolt.gamewindowsize()
          local tw, th = event:targetsize()
          for i = 1, event:vertexcount(), event:verticesperimage() do
            -- check if this is one of the 48x48 images of interest to us
            local f = nil
            local ax, ay, aw, ah, _, _ = event:vertexatlasdetails(i)
            if aw == objectsize and ah == objectsize then
              f = images[event:texturedata(ax, ay + objecthalfsize, aw * 4)]
            end
            if f ~= nil then
              -- set the flag indicating that we've seen the puzzle on this frame
              this.objectsfound = true

              -- if this is an arrow, draw overlay info on top of it as appropriate
              local id, dir = f()
              if id >= 5 then
                -- find the arrow in this.arrows that matches this one
                local arrow = nil
                local red, _, _, _ = event:vertexcolour(i)
                red = convertcolour(red)
                for _, a in ipairs(this.solvedarrows) do
                  if a.red == red and a.direction == dir then
                    arrow = a
                    break
                  end
                end

                if arrow then
                  local track = arrow.track

                  -- if the arrow is newly pressed, change solutionposition
                  local pressed = id == 7
                  if pressed and not arrow.pressed then
                    track.solutionposition = track.solutionposition + (track.solutiondirection == arrow.trackdir and -1 or 1)
                    if (track.solutionposition < 0) then
                      track.solutionposition = track.solutionposition + track.piececount
                    end
                    if track.solutionposition * 2 > track.piececount then
                      track.solutionposition = track.piececount - track.solutionposition
                      track.solutiondirection = 3 - track.solutiondirection
                    end
                    this.nextsolvetime = bolt.time() + clickresolvedelay
                  end
                  arrow.pressed = pressed

                  -- draw an overlay here
                  local sx2, sy2 = event:vertexxy(i)
                  local sx, sy = event:vertexxy(i + 2)
                  if track.solutionposition == 0 then goto nodraw end
                  if not (track.solutiondirection == arrow.trackdir) then goto nodraw end
                  drawnumber(math.abs(track.solutionposition), ((sx + sx2) / 2) * gw / tw, ((sy + sy2) / 2) * gh / th)
                  ::nodraw::
                end
              end
            end
          end
        end
      end

      local function onrendericon (this, event)
        if this.hasrunedata then return end
        if event:modelcount() ~= 1 or event:modelvertexcount(1) < runedecorvertexid then return end
        local vx, vy, vz = event:modelvertexpoint(1, 1):get()
        -- the second point is used by water runes and probably blood runes, the third is used by nature runes,
        -- and the first is every other type of rune model.
        if (vx ~= -60 or vy ~= 32 or vz ~= -60) and (vx ~= -20 or vy ~= 68 or vz ~= 48) and (vx ~= 80 or vy ~= 0 or vz ~= 24) then return end
        local ix, iy, iw, ih = event:xywh()
        local piece = nil
        for _, p in ipairs(this.pieces) do
          if not (ix < p.x or iy < p.y or (ix + iw) > p.x2 or (iy + ih) > p.y2 or (piece and p.height < piece.height)) then
            piece = p
          end
        end
        if piece then
          local x, y, z = event:modelvertexpoint(1, runedecorvertexid):get()
          local r, g, b, _ = event:modelvertexcolour(1, runedecorvertexid)
          local rune = {x = x, y = y, z = z, r = convertcolour(r), g = convertcolour(g), b = convertcolour(b)}
          if piece.rune and not runeeq(rune, piece.rune) then
            this.isvalid = false
            return
          end
          if not piece.rune then this.validrunecount = this.validrunecount + 1 end
          piece.rune = rune
        end
      end

      local function reset (this)
        this.hasrunedata = false
        this.tracks = {}
        this.arrows = {}
        this.arrowcount = 0
        this.pieces = {}
        this.piececount = 0
        this.pieceheight = 0
        this.validrunecount = 0
        this.highesttrack = 0
        this.firstmatch = nil
        this.objectsfound = true
        this.nextsolvetime = bolt.time() + resolveinterval
      end

      local object = {
        isvalid = true,
        hasrunedata = false,
        tracks = {},
        arrows = {},
        arrowcount = 0,
        pieces = {},
        piececount = 0,
        pieceheight = 0,
        validrunecount = 0,
        objectsfound = true,
        highesttrack = 0,
        nextsolvetime = nil,

        valid = valid,
        onswapbuffers = onswapbuffers,
        onrender2d = onrender2d,
        onrendericon = onrendericon,
        solve = solve,
        reset = reset,
      }
      handlerender2d(object, event, firstvertex)
      return object
    end,

    vertexisknotarrow = function (event, vertex)
      local ax, ay, aw, ah, _, _ = event:vertexatlasdetails(vertex)
      if aw == objectsize and ah == objectsize then
        local f = images[event:texturedata(ax, ay + objecthalfsize, aw * 4)]
        if f ~= nil then
          local id, _ = f()
          return id >= 5
        end
      end
      return false
    end,
  }
end}
